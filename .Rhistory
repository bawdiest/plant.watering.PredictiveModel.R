lv_d <- a_weatherData[a_weatherData$TimeStp >= lv_date_24h & a_weatherData$TimeStp <= lv_date,] # Get weather Data for last 48 hours
lv_y <- mean(lv_d$tre200b0)
lv_y <- cbind(lv_y, mean(lv_d$tre200bn))
lv_y <- cbind(lv_y, mean(lv_d$tre200bx))
lv_y <- cbind(lv_y, mean(lv_d$ure200b0))
lv_y <- cbind(lv_y, sum(lv_d$rre150b0))
lv_y <- cbind(lv_y, mean(lv_d$prestab0))
lv_y <- cbind(lv_y, 1) #Add column with ones to replace it in the next step with dates
lv_y[ncol(lv_y)] <- as.POSIXct(lv_date, origin="1970-01-01", tz="GMT" )
return(lv_y)
})
a_sumsANDmeans <- as.data.frame(t(unlist(a_sumsANDmeans)))
a_sumsANDmeans[,ncol(a_sumsANDmeans)] <- as.POSIXct(a_sumsANDmeans[,ncol(a_sumsANDmeans)], origin = "1970-01-01", tz = "GMT") + hours(2)
names(a_sumsANDmeans) <- c("tre200b0Mean", "tre200bnMean", "tre200bxMean", "ure200b0Mean", "rre150b0Sum", "prestab0Mean", "V7")
#t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-24", by.x = "TimeStpRnd", suffixes = c(".m",".24"))
t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-24", by.x = "TimeStpRnd")
t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-27", by.x = "TimeStpRnd")
t_dataSet <- merge(x = t_dataSet, y = a_sumsANDmeans, by.y = "V7", by.x = "TimeStpRnd", all.x = TRUE, all.y = TRUE)
# Drop unneccessairy variables --------------------------------------------
#columnsToDrop <- names(t_dataSet) %in% grep("[.y]$", names(t_dataSet), value=TRUE)
#t_dataSet <- t_dataSet[,!columnsToDrop]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% c("TimeStpRnd"))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^time*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^date*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^stn*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^TimeStp*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^dkl*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% c("DateRnd"))]
# Prepare DataSet for machine learning --------------------------------------------
t_dataSet <- na.omit(t_dataSet)
a_dataSet <- data.matrix(t_dataSet)
a_dataSet <- as.data.frame(a_dataSet)
a_dataSet <- polyFeatures(a_dataSet,2)
a_dataSet <- a_dataSet[, !(names(t_dataSet) %in% grep("^x*2", names(a_dataSet), value=TRUE))] #No X's in dataset!!!
# Train models --------------------------------------------
model <- lm(`x` ~ . - `x*2` + 1, data = a_dataSet)
#model <- lm(`x` ~ prestab0Mean +1, data = a_dataSet)
summary(model)
plot(predict(model,a_dataSet),a_dataSet$x,pch = 16, cex = 0.8, col = "blue")
abline(lm(a_dataSet$x ~ predict(model)), col="red")
plot(predict(model,a_dataSet),a_dataSet$x,pch = 16, cex = 0.8, col = "blue")
abline(lm(a_dataSet$x ~ predict(model)), col="grey")
plot(predict(model,a_dataSet),a_dataSet$x,pch = 16, cex = 0.8, col = "grey")
abline(lm(a_dataSet$x ~ predict(model)), col="blue")
plot(predict(model,a_dataSet),a_dataSet$x,pch = 16, cex = 0.8, col = "yellow")
abline(lm(a_dataSet$x ~ predict(model)), col="blue")
plot(predict(model,a_dataSet),a_dataSet$x,pch = 16, cex = 0.8, col = "blue")
abline(lm(a_dataSet$x ~ predict(model)), col="yellow")
plot(predict(model,a_dataSet),a_dataSet$x,pch = 16, cex = 0.8, col = "blue")
abline(lm(a_dataSet$x ~ predict(model)), col="red")
# Create DataSet --------------------------------------------
t_dataSet <- p_pumpLog
lv_pumpDurationInLast24h <- apply(t_dataSet, 1, function(x) {
date <- as.Date(x["DateRnd"]) - days(1)
data <- p_pumpLog[p_pumpLog$DateRnd == date,"x"]
if(length(data) == 0) data = 0 else data = data
return(data)
})
t_dataSet <- cbind(t_dataSet, unlist(lv_pumpDurationInLast24h))
names(t_dataSet)[ncol(t_dataSet)] <- "PumpDurationLast24h"
# a_weatherData <- cbind(p_weatherData, p_weatherData$TimeStp + hours(0))
a_weatherData <- cbind(p_weatherData, p_weatherData$TimeStp)
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-24"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(24))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-27"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(36))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-30"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(42))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-36"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(48))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-42"
# Get Sums and Means
a_sumsANDmeans <- apply(t_dataSet, 1, function(x) {
lv_date <- as.POSIXct(x["TimeStpRnd"]) - days(1)
lv_date_24h <- as.POSIXct(x["TimeStpRnd"]) - days(2)
lv_d <- a_weatherData[a_weatherData$TimeStp >= lv_date_24h & a_weatherData$TimeStp <= lv_date,] # Get weather Data for last 48 hours
lv_y <- mean(lv_d$tre200b0)
lv_y <- cbind(lv_y, mean(lv_d$tre200bn))
lv_y <- cbind(lv_y, mean(lv_d$tre200bx))
lv_y <- cbind(lv_y, mean(lv_d$ure200b0))
lv_y <- cbind(lv_y, sum(lv_d$rre150b0))
lv_y <- cbind(lv_y, mean(lv_d$prestab0))
lv_y <- cbind(lv_y, 1) #Add column with ones to replace it in the next step with dates
lv_y[ncol(lv_y)] <- as.POSIXct(lv_date, origin="1970-01-01", tz="GMT" )
return(lv_y)
})
a_sumsANDmeans <- as.data.frame(t(unlist(a_sumsANDmeans)))
a_sumsANDmeans[,ncol(a_sumsANDmeans)] <- as.POSIXct(a_sumsANDmeans[,ncol(a_sumsANDmeans)], origin = "1970-01-01", tz = "GMT") + hours(2)
names(a_sumsANDmeans) <- c("tre200b0Mean", "tre200bnMean", "tre200bxMean", "ure200b0Mean", "rre150b0Sum", "prestab0Mean", "V7")
#t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-24", by.x = "TimeStpRnd", suffixes = c(".m",".24"))
t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-24", by.x = "TimeStpRnd")
t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-27", by.x = "TimeStpRnd")
t_dataSet <- merge(x = t_dataSet, y = a_sumsANDmeans, by.y = "V7", by.x = "TimeStpRnd", all.x = TRUE, all.y = TRUE)
# Drop unneccessairy variables --------------------------------------------
#columnsToDrop <- names(t_dataSet) %in% grep("[.y]$", names(t_dataSet), value=TRUE)
#t_dataSet <- t_dataSet[,!columnsToDrop]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% c("TimeStpRnd"))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^time*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^date*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^stn*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^TimeStp*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^dkl*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% c("DateRnd"))]
# Prepare DataSet for machine learning --------------------------------------------
t_dataSet <- na.omit(t_dataSet)
a_dataSet <- data.matrix(t_dataSet)
a_dataSet <- as.data.frame(a_dataSet)
a_dataSet <- polyFeatures(a_dataSet,2)
a_dataSet <- a_dataSet[, !(names(t_dataSet) %in% grep("^x*2", names(a_dataSet), value=TRUE))] #No X's in dataset!!!
# Train models --------------------------------------------
model <- lm(`x` ~ . - `x*2` + 1, data = a_dataSet)
#model <- lm(`x` ~ prestab0Mean +1, data = a_dataSet)
summary(model)
plot(predict(model,a_dataSet),a_dataSet$x,pch = 16, cex = 0.8, col = "blue")
abline(lm(a_dataSet$x ~ predict(model)), col="red")
View(a_sumsANDmeans)
# Create DataSet --------------------------------------------
t_dataSet <- p_pumpLog
lv_pumpDurationInLast24h <- apply(t_dataSet, 1, function(x) {
date <- as.Date(x["DateRnd"]) - days(1)
data <- p_pumpLog[p_pumpLog$DateRnd == date,"x"]
if(length(data) == 0) data = 0 else data = data
return(data)
})
t_dataSet <- cbind(t_dataSet, unlist(lv_pumpDurationInLast24h))
names(t_dataSet)[ncol(t_dataSet)] <- "PumpDurationLast24h"
# a_weatherData <- cbind(p_weatherData, p_weatherData$TimeStp + hours(0))
a_weatherData <- cbind(p_weatherData, p_weatherData$TimeStp)
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-24"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(24))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-27"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(36))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-30"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(42))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-36"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(48))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-42"
# Get Sums and Means
a_sumsANDmeans <- apply(t_dataSet, 1, function(x) {
lv_date <- as.POSIXct(x["TimeStpRnd"]) - days(1)
lv_date_24h <- as.POSIXct(x["TimeStpRnd"]) - days(2)
lv_d <- a_weatherData[a_weatherData$TimeStp >= lv_date_24h & a_weatherData$TimeStp <= lv_date,] # Get weather Data for last 48 hours
lv_y <- mean(lv_d$tre200b0)
lv_y <- cbind(lv_y, mean(lv_d$tre200bn))
lv_y <- cbind(lv_y, mean(lv_d$tre200bx))
lv_y <- cbind(lv_y, mean(lv_d$ure200b0))
lv_y <- cbind(lv_y, sum(lv_d$rre150b0))
lv_y <- cbind(lv_y, mean(lv_d$prestab0))
lv_y <- cbind(lv_y, 1) #Add column with ones to replace it in the next step with dates
lv_y[ncol(lv_y)] <- as.POSIXct(lv_date, origin="1970-01-01", tz="GMT" )
return(lv_y)
})
a_sumsANDmeans <- as.data.frame(t(unlist(a_sumsANDmeans)))
a_sumsANDmeans[,ncol(a_sumsANDmeans)] <- as.POSIXct(a_sumsANDmeans[,ncol(a_sumsANDmeans)], origin = "1970-01-01", tz = "GMT") + hours(2)
names(a_sumsANDmeans) <- c("tre200b0Mean", "tre200bnMean", "tre200bxMean", "ure200b0Mean", "rre150b0Sum", "prestab0Mean", "V7")
#t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-24", by.x = "TimeStpRnd", suffixes = c(".m",".24"))
t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-24", by.x = "TimeStpRnd")
t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-27", by.x = "TimeStpRnd")
t_dataSet <- merge(x = t_dataSet, y = a_sumsANDmeans, by.y = "V7", by.x = "TimeStpRnd-24", all.x = TRUE, all.y = TRUE)
# Create DataSet --------------------------------------------
t_dataSet <- p_pumpLog
lv_pumpDurationInLast24h <- apply(t_dataSet, 1, function(x) {
date <- as.Date(x["DateRnd"]) - days(1)
data <- p_pumpLog[p_pumpLog$DateRnd == date,"x"]
if(length(data) == 0) data = 0 else data = data
return(data)
})
t_dataSet <- cbind(t_dataSet, unlist(lv_pumpDurationInLast24h))
names(t_dataSet)[ncol(t_dataSet)] <- "PumpDurationLast24h"
# a_weatherData <- cbind(p_weatherData, p_weatherData$TimeStp + hours(0))
a_weatherData <- cbind(p_weatherData, p_weatherData$TimeStp)
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-24"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(24))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-27"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(36))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-30"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(42))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-36"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(48))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-42"
# Get Sums and Means
a_sumsANDmeans <- apply(t_dataSet, 1, function(x) {
lv_date <- as.POSIXct(x["TimeStpRnd"]) - days(1)
lv_date_24h <- as.POSIXct(x["TimeStpRnd"]) - days(2)
lv_d <- a_weatherData[a_weatherData$TimeStp >= lv_date_24h & a_weatherData$TimeStp <= lv_date,] # Get weather Data for last 48 hours
lv_y <- mean(lv_d$tre200b0)
lv_y <- cbind(lv_y, mean(lv_d$tre200bn))
lv_y <- cbind(lv_y, mean(lv_d$tre200bx))
lv_y <- cbind(lv_y, mean(lv_d$ure200b0))
lv_y <- cbind(lv_y, sum(lv_d$rre150b0))
lv_y <- cbind(lv_y, mean(lv_d$prestab0))
lv_y <- cbind(lv_y, 1) #Add column with ones to replace it in the next step with dates
lv_y[ncol(lv_y)] <- as.POSIXct(lv_date, origin="1970-01-01", tz="GMT" )
return(lv_y)
})
a_sumsANDmeans <- as.data.frame(t(unlist(a_sumsANDmeans)))
a_sumsANDmeans[,ncol(a_sumsANDmeans)] <- as.POSIXct(a_sumsANDmeans[,ncol(a_sumsANDmeans)], origin = "1970-01-01", tz = "GMT") + hours(2)
names(a_sumsANDmeans) <- c("tre200b0Mean", "tre200bnMean", "tre200bxMean", "ure200b0Mean", "rre150b0Sum", "prestab0Mean", "V7")
#t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-24", by.x = "TimeStpRnd", suffixes = c(".m",".24"))
t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-24", by.x = "TimeStpRnd")
t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-27", by.x = "TimeStpRnd")
t_dataSet <- merge(x = t_dataSet, y = a_sumsANDmeans, by.y = "V7", by.x = "TimeStp-24", all.x = TRUE, all.y = TRUE)
# Drop unneccessairy variables --------------------------------------------
#columnsToDrop <- names(t_dataSet) %in% grep("[.y]$", names(t_dataSet), value=TRUE)
#t_dataSet <- t_dataSet[,!columnsToDrop]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% c("TimeStpRnd"))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^time*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^date*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^stn*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^TimeStp*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^dkl*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% c("DateRnd"))]
# Prepare DataSet for machine learning --------------------------------------------
t_dataSet <- na.omit(t_dataSet)
a_dataSet <- data.matrix(t_dataSet)
a_dataSet <- as.data.frame(a_dataSet)
a_dataSet <- polyFeatures(a_dataSet,2)
a_dataSet <- a_dataSet[, !(names(t_dataSet) %in% grep("^x*2", names(a_dataSet), value=TRUE))] #No X's in dataset!!!
# Train models --------------------------------------------
model <- lm(`x` ~ . - `x*2` + 1, data = a_dataSet)
#model <- lm(`x` ~ prestab0Mean +1, data = a_dataSet)
summary(model)
plot(predict(model,a_dataSet),a_dataSet$x,pch = 16, cex = 0.8, col = "blue")
abline(lm(a_dataSet$x ~ predict(model)), col="red")
# Create DataSet --------------------------------------------
t_dataSet <- p_pumpLog
lv_pumpDurationInLast24h <- apply(t_dataSet, 1, function(x) {
date <- as.Date(x["DateRnd"]) - days(1)
data <- p_pumpLog[p_pumpLog$DateRnd == date,"x"]
if(length(data) == 0) data = 0 else data = data
return(data)
})
t_dataSet <- cbind(t_dataSet, unlist(lv_pumpDurationInLast24h))
names(t_dataSet)[ncol(t_dataSet)] <- "PumpDurationLast24h"
# a_weatherData <- cbind(p_weatherData, p_weatherData$TimeStp + hours(0))
a_weatherData <- cbind(p_weatherData, p_weatherData$TimeStp)
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-24"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(24))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-27"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(36))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-30"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(42))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-36"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(48))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-42"
# Get Sums and Means
a_sumsANDmeans <- apply(t_dataSet, 1, function(x) {
lv_date <- as.POSIXct(x["TimeStpRnd"]) - days(1)
lv_date_24h <- as.POSIXct(x["TimeStpRnd"]) - days(2)
lv_d <- a_weatherData[a_weatherData$TimeStp >= lv_date_24h & a_weatherData$TimeStp <= lv_date,] # Get weather Data for last 48 hours
lv_y <- mean(lv_d$tre200b0)
lv_y <- cbind(lv_y, mean(lv_d$tre200bn))
lv_y <- cbind(lv_y, mean(lv_d$tre200bx))
lv_y <- cbind(lv_y, mean(lv_d$ure200b0))
lv_y <- cbind(lv_y, sum(lv_d$rre150b0))
lv_y <- cbind(lv_y, mean(lv_d$prestab0))
lv_y <- cbind(lv_y, 1) #Add column with ones to replace it in the next step with dates
lv_y[ncol(lv_y)] <- as.POSIXct(lv_date, origin="1970-01-01", tz="GMT" )
return(lv_y)
})
a_sumsANDmeans <- as.data.frame(t(unlist(a_sumsANDmeans)))
a_sumsANDmeans[,ncol(a_sumsANDmeans)] <- as.POSIXct(a_sumsANDmeans[,ncol(a_sumsANDmeans)], origin = "1970-01-01", tz = "GMT") + hours(2)
names(a_sumsANDmeans) <- c("tre200b0Mean", "tre200bnMean", "tre200bxMean", "ure200b0Mean", "rre150b0Sum", "prestab0Mean", "V7")
#t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-24", by.x = "TimeStpRnd", suffixes = c(".m",".24"))
t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-24", by.x = "TimeStpRnd")
t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-27", by.x = "TimeStpRnd")
t_dataSet <- merge(x = t_dataSet, y = a_sumsANDmeans, by.y = "V7", by.x = "TimeStp-24", all.x = TRUE, all.y = TRUE)
# Drop unneccessairy variables --------------------------------------------
#columnsToDrop <- names(t_dataSet) %in% grep("[.y]$", names(t_dataSet), value=TRUE)
#t_dataSet <- t_dataSet[,!columnsToDrop]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% c("TimeStpRnd"))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^time*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^date*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^stn*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^fu*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^TimeStp*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^dkl*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% c("DateRnd"))]
# Prepare DataSet for machine learning --------------------------------------------
t_dataSet <- na.omit(t_dataSet)
a_dataSet <- data.matrix(t_dataSet)
a_dataSet <- as.data.frame(a_dataSet)
a_dataSet <- polyFeatures(a_dataSet,2)
a_dataSet <- a_dataSet[, !(names(t_dataSet) %in% grep("^x*2", names(a_dataSet), value=TRUE))] #No X's in dataset!!!
# Train models --------------------------------------------
model <- lm(`x` ~ . - `x*2` + 1, data = a_dataSet)
#model <- lm(`x` ~ prestab0Mean +1, data = a_dataSet)
summary(model)
plot(predict(model,a_dataSet),a_dataSet$x,pch = 16, cex = 0.8, col = "blue")
abline(lm(a_dataSet$x ~ predict(model)), col="red")
# Create DataSet --------------------------------------------
t_dataSet <- p_pumpLog
lv_pumpDurationInLast24h <- apply(t_dataSet, 1, function(x) {
date <- as.Date(x["DateRnd"]) - days(1)
data <- p_pumpLog[p_pumpLog$DateRnd == date,"x"]
if(length(data) == 0) data = 0 else data = data
return(data)
})
t_dataSet <- cbind(t_dataSet, unlist(lv_pumpDurationInLast24h))
names(t_dataSet)[ncol(t_dataSet)] <- "PumpDurationLast24h"
# a_weatherData <- cbind(p_weatherData, p_weatherData$TimeStp + hours(0))
a_weatherData <- cbind(p_weatherData, p_weatherData$TimeStp)
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-24"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(24))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-27"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(36))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-30"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(42))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-36"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(48))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-42"
# Get Sums and Means
a_sumsANDmeans <- apply(t_dataSet, 1, function(x) {
lv_date <- as.POSIXct(x["TimeStpRnd"]) - days(1)
lv_date_24h <- as.POSIXct(x["TimeStpRnd"]) - days(2)
lv_d <- a_weatherData[a_weatherData$TimeStp >= lv_date_24h & a_weatherData$TimeStp <= lv_date,] # Get weather Data for last 48 hours
lv_y <- mean(lv_d$tre200b0)
lv_y <- cbind(lv_y, mean(lv_d$tre200bn))
lv_y <- cbind(lv_y, mean(lv_d$tre200bx))
lv_y <- cbind(lv_y, mean(lv_d$ure200b0))
lv_y <- cbind(lv_y, sum(lv_d$rre150b0))
lv_y <- cbind(lv_y, mean(lv_d$prestab0))
lv_y <- cbind(lv_y, 1) #Add column with ones to replace it in the next step with dates
lv_y[ncol(lv_y)] <- as.POSIXct(lv_date, origin="1970-01-01", tz="GMT" )
return(lv_y)
})
a_sumsANDmeans <- as.data.frame(t(unlist(a_sumsANDmeans)))
a_sumsANDmeans[,ncol(a_sumsANDmeans)] <- as.POSIXct(a_sumsANDmeans[,ncol(a_sumsANDmeans)], origin = "1970-01-01", tz = "GMT") + hours(2)
names(a_sumsANDmeans) <- c("tre200b0Mean", "tre200bnMean", "tre200bxMean", "ure200b0Mean", "rre150b0Sum", "prestab0Mean", "V7")
#t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-24", by.x = "TimeStpRnd", suffixes = c(".m",".24"))
t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-24", by.x = "TimeStpRnd")
t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-27", by.x = "TimeStpRnd")
t_dataSet <- merge(x = t_dataSet, y = a_sumsANDmeans, by.y = "V7", by.x = "TimeStp-24", all.x = TRUE, all.y = TRUE)
# Drop unneccessairy variables --------------------------------------------
#columnsToDrop <- names(t_dataSet) %in% grep("[.y]$", names(t_dataSet), value=TRUE)
#t_dataSet <- t_dataSet[,!columnsToDrop]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% c("TimeStpRnd"))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^time*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^date*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^stn*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^fu*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^TimeStp*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^dkl*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% c("DateRnd"))]
# Prepare DataSet for machine learning --------------------------------------------
t_dataSet <- na.omit(t_dataSet)
a_dataSet <- data.matrix(t_dataSet)
a_dataSet <- as.data.frame(a_dataSet)
a_dataSet <- polyFeatures(a_dataSet,3)
a_dataSet <- a_dataSet[, !(names(t_dataSet) %in% grep("^x*2", names(a_dataSet), value=TRUE))] #No X's in dataset!!!
# Train models --------------------------------------------
model <- lm(`x` ~ . - `x*2` + 1, data = a_dataSet)
View(a_dataSet)
# Create DataSet --------------------------------------------
t_dataSet <- p_pumpLog
lv_pumpDurationInLast24h <- apply(t_dataSet, 1, function(x) {
date <- as.Date(x["DateRnd"]) - days(1)
data <- p_pumpLog[p_pumpLog$DateRnd == date,"x"]
if(length(data) == 0) data = 0 else data = data
return(data)
})
t_dataSet <- cbind(t_dataSet, unlist(lv_pumpDurationInLast24h))
names(t_dataSet)[ncol(t_dataSet)] <- "PumpDurationLast24h"
# a_weatherData <- cbind(p_weatherData, p_weatherData$TimeStp + hours(0))
a_weatherData <- cbind(p_weatherData, p_weatherData$TimeStp)
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-24"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(24))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-27"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(36))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-30"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(42))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-36"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(48))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-42"
# Get Sums and Means
a_sumsANDmeans <- apply(t_dataSet, 1, function(x) {
lv_date <- as.POSIXct(x["TimeStpRnd"]) - days(1)
lv_date_24h <- as.POSIXct(x["TimeStpRnd"]) - days(2)
lv_d <- a_weatherData[a_weatherData$TimeStp >= lv_date_24h & a_weatherData$TimeStp <= lv_date,] # Get weather Data for last 48 hours
lv_y <- mean(lv_d$tre200b0)
lv_y <- cbind(lv_y, mean(lv_d$tre200bn))
lv_y <- cbind(lv_y, mean(lv_d$tre200bx))
lv_y <- cbind(lv_y, mean(lv_d$ure200b0))
lv_y <- cbind(lv_y, sum(lv_d$rre150b0))
lv_y <- cbind(lv_y, mean(lv_d$prestab0))
lv_y <- cbind(lv_y, 1) #Add column with ones to replace it in the next step with dates
lv_y[ncol(lv_y)] <- as.POSIXct(lv_date, origin="1970-01-01", tz="GMT" )
return(lv_y)
})
a_sumsANDmeans <- as.data.frame(t(unlist(a_sumsANDmeans)))
a_sumsANDmeans[,ncol(a_sumsANDmeans)] <- as.POSIXct(a_sumsANDmeans[,ncol(a_sumsANDmeans)], origin = "1970-01-01", tz = "GMT") + hours(2)
names(a_sumsANDmeans) <- c("tre200b0Mean", "tre200bnMean", "tre200bxMean", "ure200b0Mean", "rre150b0Sum", "prestab0Mean", "V7")
#t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-24", by.x = "TimeStpRnd", suffixes = c(".m",".24"))
t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-24", by.x = "TimeStpRnd")
t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-27", by.x = "TimeStpRnd")
t_dataSet <- merge(x = t_dataSet, y = a_sumsANDmeans, by.y = "V7", by.x = "TimeStp-24", all.x = TRUE, all.y = TRUE)
# Drop unneccessairy variables --------------------------------------------
#columnsToDrop <- names(t_dataSet) %in% grep("[.y]$", names(t_dataSet), value=TRUE)
#t_dataSet <- t_dataSet[,!columnsToDrop]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% c("TimeStpRnd"))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^time*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^date*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^stn*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^fu*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^TimeStp*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^dkl*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% c("DateRnd"))]
# Prepare DataSet for machine learning --------------------------------------------
t_dataSet <- na.omit(t_dataSet)
a_dataSet <- data.matrix(t_dataSet)
a_dataSet <- as.data.frame(a_dataSet)
a_dataSet <- polyFeatures(a_dataSet,3)
a_dataSet <- a_dataSet[, !(names(t_dataSet) %in% grep("^x*2", names(a_dataSet), value=TRUE))] #No X's in dataset!!!
# Train models --------------------------------------------
model <- lm(`x` ~ . - `x*3` + 1, data = a_dataSet)
#model <- lm(`x` ~ prestab0Mean +1, data = a_dataSet)
summary(model)
# Create DataSet --------------------------------------------
t_dataSet <- p_pumpLog
lv_pumpDurationInLast24h <- apply(t_dataSet, 1, function(x) {
date <- as.Date(x["DateRnd"]) - days(1)
data <- p_pumpLog[p_pumpLog$DateRnd == date,"x"]
if(length(data) == 0) data = 0 else data = data
return(data)
})
t_dataSet <- cbind(t_dataSet, unlist(lv_pumpDurationInLast24h))
names(t_dataSet)[ncol(t_dataSet)] <- "PumpDurationLast24h"
# a_weatherData <- cbind(p_weatherData, p_weatherData$TimeStp + hours(0))
a_weatherData <- cbind(p_weatherData, p_weatherData$TimeStp)
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-24"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(24))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-27"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(36))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-30"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(42))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-36"
a_weatherData <- cbind(a_weatherData, p_weatherData$TimeStp + hours(48))
names(a_weatherData)[ncol(a_weatherData)] <- "TimeStp-42"
# Get Sums and Means
a_sumsANDmeans <- apply(t_dataSet, 1, function(x) {
lv_date <- as.POSIXct(x["TimeStpRnd"]) - days(1)
lv_date_24h <- as.POSIXct(x["TimeStpRnd"]) - days(2)
lv_d <- a_weatherData[a_weatherData$TimeStp >= lv_date_24h & a_weatherData$TimeStp <= lv_date,] # Get weather Data for last 48 hours
lv_y <- mean(lv_d$tre200b0)
lv_y <- cbind(lv_y, mean(lv_d$tre200bn))
lv_y <- cbind(lv_y, mean(lv_d$tre200bx))
lv_y <- cbind(lv_y, mean(lv_d$ure200b0))
lv_y <- cbind(lv_y, sum(lv_d$rre150b0))
lv_y <- cbind(lv_y, mean(lv_d$prestab0))
lv_y <- cbind(lv_y, 1) #Add column with ones to replace it in the next step with dates
lv_y[ncol(lv_y)] <- as.POSIXct(lv_date, origin="1970-01-01", tz="GMT" )
return(lv_y)
})
a_sumsANDmeans <- as.data.frame(t(unlist(a_sumsANDmeans)))
a_sumsANDmeans[,ncol(a_sumsANDmeans)] <- as.POSIXct(a_sumsANDmeans[,ncol(a_sumsANDmeans)], origin = "1970-01-01", tz = "GMT") + hours(2)
names(a_sumsANDmeans) <- c("tre200b0Mean", "tre200bnMean", "tre200bxMean", "ure200b0Mean", "rre150b0Sum", "prestab0Mean", "V7")
#t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-24", by.x = "TimeStpRnd", suffixes = c(".m",".24"))
t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-24", by.x = "TimeStpRnd")
t_dataSet <- merge(t_dataSet, a_weatherData, by.y = "TimeStp-27", by.x = "TimeStpRnd")
t_dataSet <- merge(x = t_dataSet, y = a_sumsANDmeans, by.y = "V7", by.x = "TimeStp-24", all.x = TRUE, all.y = TRUE)
# Drop unneccessairy variables --------------------------------------------
#columnsToDrop <- names(t_dataSet) %in% grep("[.y]$", names(t_dataSet), value=TRUE)
#t_dataSet <- t_dataSet[,!columnsToDrop]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% c("TimeStpRnd"))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^time*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^date*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^stn*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^fu*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^TimeStp*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% grep("^dkl*", names(t_dataSet), value=TRUE))]
t_dataSet <- t_dataSet[, !(names(t_dataSet) %in% c("DateRnd"))]
# Prepare DataSet for machine learning --------------------------------------------
t_dataSet <- na.omit(t_dataSet)
a_dataSet <- data.matrix(t_dataSet)
a_dataSet <- as.data.frame(a_dataSet)
a_dataSet <- polyFeatures(a_dataSet,3)
a_dataSet <- a_dataSet[, !(names(t_dataSet) %in% grep("^x*2", names(a_dataSet), value=TRUE))] #No X's in dataset!!!
# Train models --------------------------------------------
model <- lm(`x` ~ . - `x*3` - `x*3.1` + 1, data = a_dataSet)
#model <- lm(`x` ~ prestab0Mean +1, data = a_dataSet)
summary(model)
plot(predict(model,a_dataSet),a_dataSet$x,pch = 16, cex = 0.8, col = "blue")
abline(lm(a_dataSet$x ~ predict(model)), col="red")
View(cbind(predict(model,a_dataSet),a_dataSet$x))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
install.packages(c("DBI", "Matrix", "R6", "Rcpp", "chron", "cluster", "codetools", "curl", "data.table", "evaluate", "foreign", "git2r", "jsonlite", "knitr", "lattice", "mgcv", "openssl", "packrat", "rmarkdown", "rsconnect", "shiny", "stringi", "survival", "yaml"))
update.packages()
y
system("locate libSM.6.dylib")
sudo ln -s /usr/X11 /opt/X11
sudo ln -s /opt/X11/lib/libpng15.15.dylib /usr/local/lib/libpng15.15.dylib
